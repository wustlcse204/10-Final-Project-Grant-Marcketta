{"version":3,"sources":["Base.js","Region.js","Listings.js","App.js","serviceWorker.js","index.js"],"names":["Base","props","id","className","onClick","this","ultimate","src","width","melee","Component","Region","Listings","meleeinfo","link","ultinfo","text","snoowrap","require","App","state","meleeposts","ultiposts","r","userAgent","clientId","clientSecret","refreshToken","subreddit","getSubreddit","topPosts","getTop","time","limit","ultdata","forEach","post","push","url","title","score","console","log","meleedata","setState","map","thisMeleePost","index","thisUltiPost","keyUlti","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.001ee4f5.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\n\r\n class Base extends Component {\r\n\r\n  constructor (props){\r\n    super(props);\r\n  }\r\n\r\n\r\n render(){\r\n    return(\r\n      <article id=\"page\" className=\"mainpage\">\r\n        <div className = \"container\">\r\n\r\n        <div className = \"row\">\r\n\r\n      \r\n        <div className = \"col-3 d-flex justify-content-center \">\r\n          <img onClick = {this.ultimate} src = {\"https://upload.wikimedia.org/wikipedia/commons/c/c2/Super_Smash_Bros._Ultimate_Logo.png\"} className = \"img-responsive logo\" width = \"70%\"  />\r\n        </div>\r\n\r\n        <div className = \"col-6 d-flex justify-content-center\">\r\n          <h1> Smash Compiler </h1>\r\n        </div>\r\n        \r\n        <div className = \"col-3 d-flex justify-content-center \">\r\n          <img onClick = {this.melee} src = {\"https://www.pngkey.com/png/detail/355-3554183_the-melee-logo-in-hd-http-super-smash.png\"} className = \"img-responsive logo\" width = \"70%\"  />\r\n        </div>\r\n        </div>\r\n\r\n        <div className = \"row\">\r\n\r\n        <div className = \"col-12 d-flex justify-content-center\">\r\n\r\n          <h3> A resource for Smash Data of all shapes and kinds </h3>\r\n        </div>\r\n        </div>\r\n\r\n        <div className = \"row\">\r\n\r\n        </div>\r\n\r\n        </div>\r\n      </article>\r\n      );\r\n  }\r\n\r\n}\r\nexport default Base;","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nclass Region extends Component{\r\n\r\nconstructor (props){\r\n    super(props);\r\n}\r\n\r\n\r\nrender(){\r\n\treturn(\r\n\t\t<div className = \"container\">\r\n\t\t<div className = \"row\">\r\n\r\n\t\t<div className = \"col-6 d-flex justify-content-center\" >\r\n\t\t\t<h4> Ultimate News Feed </h4>\r\n\t\t</div>\r\n\t\t<div className = \"col-6 d-flex justify-content-center\" >\r\n\t\t\t<h4> Melee News Feed </h4>\r\n\t\t</div>\r\n\r\n\t\t</div>\r\n\t\t</div>\r\n\t)\r\n\r\n\t\r\n}\r\n\r\n\r\n}\r\n\r\nexport default Region;","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\n\r\n\r\n\r\n\r\nclass Listings extends Component{\r\n\tconstructor(props) {\r\n\t    super(props);\r\n\t }\r\n\r\n\trender(){\r\n\t\treturn(\r\n\t\t<article className=\"Listings\">\r\n\t        <div className = \"container\">\r\n\t         <div className = \"row\">\r\n\t      \r\n\r\n\t        <div className = \"col-6 d-flex justify-content-center\">\r\n\t        \t<img src = {this.props.meleeinfo.link} />\r\n\t        </div>\r\n\r\n\t        <div className = \"col-6 d-flex justify-content-center\">\r\n\t        \t<img src = {this.props.ultinfo.link} />\r\n\t        </div>\r\n\r\n\t        </div>\r\n\r\n\r\n\t        <div className = \"row\">\r\n\t      \r\n\r\n\t        <div className = \"col-6 d-flex justify-content-center\">\r\n\t        \t<h4> {this.props.meleeinfo.text} </h4>\r\n\t        </div>\r\n\r\n\t        <div className = \"col-6 d-flex justify-content-center\">\r\n\t        \t<h4> {this.props.ultinfo.text} </h4>\r\n\t        </div>\r\n\r\n\t        </div>\r\n\r\n\r\n\t        </div>\r\n\t     </article>\r\n\t\t);\r\n\r\n\t\t\r\n\t}\r\n\r\n\r\n}\r\n\r\nexport default Listings;","import React, { Component } from 'react';\nimport './App.css';\nimport Base from './Base';\nimport Region from './Region';\nimport Listings from './Listings';\n\n\n\nvar snoowrap = require('snoowrap');\n\n\n\nclass App extends Component {\n\n    constructor (props){\n      super(props);\n      this.state = { meleeposts: [ ], ultiposts: [ ] };\n    }\n    componentDidMount(){\n      const r = new snoowrap({\n        userAgent: 'A random string.',\n        clientId: '-0bzUta-4HbkFA',\n        clientSecret: 'RT287RG-man9a0r_nw8eSgZgAnI',\n        refreshToken: '494759915551-hg1GrUIyIyr5tpOxzppMuCz0aK8'\n      });\n\n      var subreddit =  r.getSubreddit('smashbrosultimate');\n      var topPosts =  subreddit.getTop({time: 'week', limit: 3});\n      let ultdata = [];\n\n      topPosts.forEach((post) => {\n      ultdata.push({\n        link: post.url,\n        text: post.title,\n        score: post.score\n      })\n      });\n      console.log(ultdata);\n\n      subreddit =  r.getSubreddit('ssbm');\n      topPosts =  subreddit.getTop({time: 'week', limit: 3});\n      let meleedata = [];\n\n      topPosts.forEach((post) => {\n        meleedata.push({\n          link: post.url,\n          text: post.title,\n          score: post.score\n        })\n      });\n      console.log(meleedata);   \n\n\n      this.setState({\n        meleeposts : meleedata, \n        ultiposts : ultdata\n      }, () => {\n        console.log(\"meleeposts\");\n        console.log(this.state.meleeposts);\n        console.log(\"ultiposts\")\n        console.log(this.state.ultiposts);\n      });\n\n    }\n\n\n\n\n render(){\n\n    return(\n      <div className = \"container\" id = \"whole\" className = \"app\">\n      <Base> </Base>\n      <Region> </Region>\n\n      {this.state.meleeposts.map((thisMeleePost,index) => (\n         <h4> {thisMeleePost.text} </h4>\n      ))},\n      {this.state.ultiposts.map((thisUltiPost) =>\n        <Listings keyUlti = {thisUltiPost}/>\n      )}\n      </div>\n      );\n  }\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}